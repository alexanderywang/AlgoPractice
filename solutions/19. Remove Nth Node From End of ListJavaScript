/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} n
 * @return {ListNode}
 */
//1 pass 2 ptrs, n distance apart, when 1st ptr gets to end, 2nd ptr is at n from end
var removeNthFromEnd = function(head, n) {
    let dummy = new ListNode(0)
    dummy.next = head
    let ptr1 = dummy
    let ptr2 = dummy
    for(let i = 0; i < n; i++){
        ptr1 = ptr1.next
    } 
    while (ptr1.next !== null){
        ptr1 = ptr1.next
        ptr2 = ptr2.next
    }
    ptr2.next = ptr2.next.next
    return dummy.next   
    
    
    // 2 passes
    // let dummy = new ListNode(0)
    // dummy.next = head
    // let length = 0
    // let first = head
    // while (first !== null) {
    //     length++
    //     first = first.next
    // }
    // length -= n
    // first = dummy
    // while (length > 0) {
    //     length--
    //     first = first.next
    // }
    // first.next = first.next.next
    // return dummy.next
};